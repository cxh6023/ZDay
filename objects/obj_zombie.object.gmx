<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the Path
negativeSwing = -1;
hp = 6+obj_player.wave;//was hp = 6+.2*obj_player.wave;
image_speed = 0;
path = path_add();
pastX = x;
pastY = y;
zSpeed = 1+.1*obj_player.wave;
directionTimer = 5;
attacking = false;
doneDamage = false;
swingOffset = 90; //this variable is the angle of the swing. The number 90 represents the zombies arm straight out
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player
if(directionTimer &gt; 0)
    {
        directionTimer--;
    }
    else
    {
        pastX = x;
        pastY = y;
        directionTimer = 2;
    }
    if(mp_grid_path(global.grid, path, x, y, obj_player.x, obj_player.y, 1))
    {
        //if(!collision_line(x, y, x+lengthdir_x(8, self.image_angle+90), y+lengthdir_y(8, self.image_angle+90), obj_zombie, 0, 1))
            path_start(path, zSpeed, path_action_stop, false);
    }
    if(pastX != x || pastY != y)
    {
        //if(!attacking &amp;&amp; !collision_line(x, y, x+lengthdir_x(8, self.image_angle+90), y+lengthdir_y(8, self.image_angle+90), obj_zombie, 0, 1))
            image_angle = point_direction(pastX, pastY, x, y)-90;
        //show_message("Should be facing the right direction.");
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Shot
if(obj_player.gun == 0 || obj_player.gun == 1) //semi-auto
    scr_zombieSingle();
if(obj_player.gun == 2 || obj_player.gun = 3) //burst-shot weapon
    scr_zombieMulti();
if(obj_player.gun == 4 || obj_player.gun == 5) //ray gun/porter's x2 ray gun
    if(instance_exists(obj_ray_explosion))
    {
        if(collision_circle(obj_ray_explosion.x, obj_ray_explosion.y, 24, self, 0, 0))
        {
            obj_player.points+=50; //Rewards the player 10 points
            hp-=obj_player.weapon[obj_player.gun+obj_player.papped, 6]; //this subtracts hgealth from the zombie depending on how much damage the curreently equipped gun does
            if(hp&lt;= 0) //if the zombie's health is less than or equal to zero
            {
                obj_player.zombiesLeft--;
                obj_player.activeZombies--;
                instance_create(x, y, obj_dead_zombie);
                instance_destroy();
            }
        }
    }
if(obj_player.weapon[obj_player.gun+obj_player.papped, 8] == 1) //if the gun is automatic
    scr_zombieAuto();
/*
if(mouse_check_button_pressed(mb_left) &amp;&amp; (obj_player.gun == 0 || obj_player.gun == 1) &amp;&amp; obj_player.magazine &gt; 0)
{
    if(collision_line(global.shotx, global.shoty, global.endx, global.endy, self, 0, 0))
    {
         instance_create(x, y, obj_blood); //Create a blood splatter at a random angle
         obj_player.points+=10; //Rewards the player 10 points
         hp-=1*obj_player.weapon[obj_player.gun+obj_player.papped, 6]; //this subtracts hgealth from the zombie depending on how much damage the curreently equipped gun does
         if(hp&lt;= 0) //if the zombie's health is less than or equal to zero
         {
            obj_player.activeZombies--;
            obj_player.zombiesLeft--;
            instance_create(x, y, obj_dead_zombie);
            instance_destroy();
         }
    }
}
*/
if(hp&lt;= 0 &amp;&amp; obj_player.knifing) //if the zombie's health is less than or equal to zero
{
    instance_create(x, y, obj_dead_zombie)
    obj_player.zombiesLeft--;
    obj_player.activeZombies--;;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If A Zombie Can Attack
if(distance_to_point(obj_player.x, obj_player.y) &lt; 5 &amp;&amp; attacking = false)
{
    zSpeed = 0;
    attacking = true;
    /*
    startArmX = x+lengthdir_x(5, 15);
    startArmY = y+lengthdir_y(5, 15);
    */
    startArmX = x+lengthdir_x(-5, 15+self.image_angle+90);
    startArmY = y+lengthdir_y(-5, 15+self.image_angle+90);
    endArmX = startArmX;
    endArmY = startArmY;
    image_speed = 0.5;
    sprite_index = spr_swing;
}
else
    zSpeed = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When A Zombie Attacks
/*
///When A Zombie Attacks
if(attacking == true) //if the zombie has started attacking
{
    startArmX = x+lengthdir_x(5, 15);
    startArmY = y+lengthdir_y(5, 15);
    endArmX = startArmX+lengthdir_x(12, 0);
    endArmY = startArmY+lengthdir_y(12, 0);
}
else
    {    
        attacking = false;
        swingOffset = 90;
        //image_speed = 0;
        //sprite_index = spr_zombie;
    }
    */
///When A Zombie Attacks
if(attacking == true) //if the zombie has started attacking
{
    zSpeed = 0;
    startArmX = x+lengthdir_x(-5, 15+self.image_angle+swingOffset+90);
    startArmY = y+lengthdir_y(-5, 15+self.image_angle+swingOffset+90);
    endArmX = startArmX+lengthdir_x(13, self.image_angle+swingOffset);
    endArmY = startArmY+lengthdir_y(13, self.image_angle+swingOffset);
    if(swingOffset &lt; 140)
        swingOffset += 2; //subtracts the angle by 2 making the hitline of the arm making a swinging motion
    else
    {    
        attacking = false;
        swingOffset = 90;
        image_speed = 0;
        sprite_index = spr_zombie;
        doneDamage = false;
    }
    if(collision_line(startArmX, startArmY, endArmX, endArmY, obj_player, 1, 1) &amp;&amp; doneDamage == false)
    {
        //instance_create(0, 0, obj_damage); //this shouldnt be needed
        obj_player.hp-=60; //this lowers the player's hp by 50
        doneDamage = true;
    }
    image_angle = point_direction(x, y, obj_player.x, obj_player.y)-90;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swing
//draw_line(startArmX, startArmY, endArmX, endArmY)
draw_self();
//draw_line(x, y, x+lengthdir_x(200, self.image_angle+90), y+lengthdir_y(200, self.image_angle+90));

if(attacking == true) //if this zombie is attacking
{
    draw_set_color(c_red);
    //draw_line(startArmX, startArmY, endArmX, endArmY)
    draw_set_color(c_gray);
}
draw_text(200, 200, "Zombie Health: " + string(hp));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
